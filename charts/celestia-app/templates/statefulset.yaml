apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: app
  {{- if or .Values.app.statefulsetAnnotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.app.statefulsetAnnotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.app.replicaCount }}
  podManagementPolicy: {{ .Values.app.podManagementPolicy | quote }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.app.podLabels .Values.commonLabels) "context" .) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: app
  serviceName: {{ template "common.names.fullname" . }}
  {{- if .Values.app.updateStrategy }}
  updateStrategy: {{- toYaml .Values.app.updateStrategy | nindent 4 }}
  {{- end }}
  {{- if .Values.app.persistentVolumeClaimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    {{- if .Values.app.persistentVolumeClaimRetentionPolicy.whenDeleted }}
    whenDeleted: {{ .Values.app.persistentVolumeClaimRetentionPolicy.whenDeleted | quote }}
    {{- end }}
    {{- if .Values.app.persistentVolumeClaimRetentionPolicy.whenScaled }}
    whenScaled: {{ .Values.app.persistentVolumeClaimRetentionPolicy.whenScaled | quote }}
    {{- end }}
  {{- end }}
  template:
    metadata:
      {{- if .Values.app.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.app.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: app
    spec:
      {{- include "app.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "app.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.app.automountServiceAccountToken }}
      {{- if .Values.app.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.app.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.app.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.app.podAffinityPreset "component" "app" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.app.podAntiAffinityPreset "component" "app" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.app.nodeAffinityPreset.type "key" .Values.app.nodeAffinityPreset.key "values" .Values.app.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.app.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.app.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.app.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.priorityClassName }}
      priorityClassName: {{ .Values.app.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.app.schedulerName }}
      schedulerName: {{ .Values.app.schedulerName | quote }}
      {{- end }}
      {{- if .Values.app.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.app.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.app.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.app.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.app.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if and .Values.app.volumePermissions.enabled .Values.app.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "app.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.app.volumePermissions.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              chown -R {{ .Values.app.containerSecurityContext.runAsUser }}:{{ .Values.app.containerSecurityContext.runAsGroup }} {{ .Values.app.settings.home }}
              ls -ltra {{ .Values.app.settings.home }}
          {{- if .Values.app.volumePermissions.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.app.volumePermissions.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.app.volumePermissions.resources }}
          resources: {{- toYaml .Values.app.volumePermissions.resources | nindent 12 }}
          {{- else if ne .Values.app.volumePermissions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.app.volumePermissions.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.app.settings.home }}/data
              {{- if .Values.app.persistence.subPath }}
              subPath: {{ .Values.app.persistence.subPath }}
              {{- end }}
        {{- end }}
        - name: download-genesis
          image: busybox
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -ex
              mkdir -p /genesis
              mkdir -p {{ .Values.app.settings.home }}/config

              if [ -n "{{ .Values.app.settings.genesisURL }}" ]; then
                wget -O /genesis/genesis.json {{ .Values.app.settings.genesisURL }}
                if ! command -v jq &> /dev/null; then
                  echo "jq not found, installing..."
                  wget -O /bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                  chmod +x /bin/jq
                fi
                if jq -e '.result.genesis' /genesis/genesis.json > /dev/null; then
                  jq '.result.genesis' /genesis/genesis.json > /genesis/genesis.json.tmp
                  mv /genesis/genesis.json.tmp /genesis/genesis.json
                fi
                # Set proper ownership and permissions
                chown 10001:10001 /genesis/genesis.json
                chmod 600 /genesis/genesis.json
              else
                echo "Error: genesisURL is not set"
                exit 1
              fi
          volumeMounts:
            - name: genesis
              mountPath: /genesis
            - name: config-dir
              mountPath: {{ .Values.app.settings.home }}/config
          securityContext:
            runAsUser: 0
            runAsGroup: 0
        {{- if .Values.app.settings.secret.enabled }}
        - name: setup-keys
          image: busybox
          command:
            - "sh"
            - "-c"
            - |
              set -ex
              # Create necessary directories
              mkdir -p {{ .Values.app.settings.home }}/keys
              mkdir -p {{ .Values.app.settings.home }}/keyring-test
              mkdir -p {{ .Values.app.settings.home }}/config

              # Copy keys to their proper locations
              cp /keys/priv_validator_key_json {{ .Values.app.settings.home }}/keys/priv_validator_key.json
              cp /keys/node_key_json {{ .Values.app.settings.home }}/keys/node_key.json
              cp /keys/priv_validator_key_json {{ .Values.app.settings.home }}/config/priv_validator_key.json
              cp /keys/node_key_json {{ .Values.app.settings.home }}/config/node_key.json

              # Copy keyring files
              {{- range .Values.app.settings.secret.items }}
              {{- if eq .path "consensus_validator_info" }}
              cp "/keys/consensus_validator_info" {{ $.Values.app.settings.home }}/keyring-test/{{ $.Values.app.podName }}-{{ $.Values.app.config.clienttoml.chain_id }}.info
              {{- end }}
              {{- if eq .path "address" }}
              cp "/keys/address" {{ $.Values.app.settings.home }}/keyring-test/$(cat /keys/id | tr '_' '.').address
              {{- end }}
              {{- end }}
              
              # Set proper ownership and permissions
              chown -R 10001:10001 {{ .Values.app.settings.home }}/keys
              chown -R 10001:10001 {{ .Values.app.settings.home }}/keyring-test
              chown -R 10001:10001 {{ .Values.app.settings.home }}/config
              chmod 750 {{ .Values.app.settings.home }}/keys
              chmod 750 {{ .Values.app.settings.home }}/keyring-test
              chmod 750 {{ .Values.app.settings.home }}/config
              chmod 600 {{ .Values.app.settings.home }}/keys/*
              chmod 600 {{ .Values.app.settings.home }}/config/priv_validator_key.json
              chmod 600 {{ .Values.app.settings.home }}/config/node_key.json
              chmod 600 {{ .Values.app.settings.home }}/keyring-test/*
          volumeMounts:
            - name: keys
              mountPath: /keys
              readOnly: true
            - name: keys-dir
              mountPath: {{ .Values.app.settings.home }}/keys
            - name: keyring-dir
              mountPath: {{ .Values.app.settings.home }}/keyring-test
            - name: config-dir
              mountPath: {{ .Values.app.settings.home }}/config
          securityContext:
            runAsUser: 0
            runAsGroup: 0
        {{- end }}
        - name: create-priv-validator-state
          image: busybox
          imagePullPolicy: IfNotPresent
          env:
            - name: CELESTIA_HOME
              value: {{ .Values.app.settings.home }}
          command:
            - sh
            - -c
            - |
              set -ex
              if [[ ! -f ${CELESTIA_HOME}/data/priv_validator_state.json ]]
              then
                  mkdir -p ${CELESTIA_HOME}/data
                  cat <<EOF > ${CELESTIA_HOME}/data/priv_validator_state.json
              {
                "height": "0",
                "round": 0,
                "step": 0
              }
              EOF
              fi
          volumeMounts:
            - name: data
              mountPath: {{ .Values.app.settings.home }}/data
        {{- if and .Values.app.setup (eq .Values.app.setup.enabled true) }}
        - name: consensus-setup
          {{- if or (eq .Values.app.settings.network "mocha") (eq .Values.app.settings.network "arabica") }}
          image: {{ template "app.image" . }}-{{ .Values.app.settings.network }}
          {{- else }}
          image: {{ template "app.image" . }}
          {{- end }}
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          command: ["/bin/sh"]
          args: ["/scripts/setup.sh"]
          env:
            {{- if .Values.app.setup.env }}
            {{- include "common.tplvalues.render" (dict "value" .Values.app.setup.env "context" $) | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: setup-scripts
              mountPath: /scripts
            {{- if and .Values.app.configFiles.config.enabled }}
            - name: config-toml
              mountPath: {{ .Values.app.configFiles.config.mountPath }}
              subPath: config.toml
            {{- end }}
            {{- if and .Values.app.configFiles.app.enabled }}
            - name: app-toml
              mountPath: {{ .Values.app.configFiles.app.mountPath }}
              subPath: app.toml
            {{- end }}
            {{- if and .Values.app.configFiles.client.enabled }}
            - name: client-toml
              mountPath: {{ .Values.app.configFiles.client.mountPath }}
              subPath: client.toml
            {{- end }}
        {{- end }}
        {{- if .Values.app.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.app.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: app
          {{- if or (eq .Values.app.settings.network "mocha") (eq .Values.app.settings.network "arabica") }}
          image: {{ template "app.image" . }}-{{ .Values.app.settings.network }}
          {{- else }}
          image: {{ template "app.image" . }}
          {{- end }}
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.app.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.app.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.app.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.app.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.app.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: CELESTIA_HOME
              value: {{ .Values.app.settings.home }}
            {{- if .Values.app.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.app.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.app.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.app.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.app.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.app.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.app.resources }}
          resources: {{- toYaml .Values.app.resources | nindent 12 }}
          {{- else if ne .Values.app.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.app.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: api
              containerPort: {{ .Values.app.containerPorts.api }}
            - name: grpc
              containerPort: {{ .Values.app.containerPorts.grpc }}
            - name: p2p
              containerPort: {{ .Values.app.containerPorts.p2p }}
            - name: rpc
              containerPort: {{ .Values.app.containerPorts.rpc }}
            - name: prometheus
              containerPort: {{ .Values.app.containerPorts.prometheus }}
            - name: tracing
              containerPort: {{ .Values.app.containerPorts.tracing }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.app.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.app.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.app.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.app.livenessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: rpc
          {{- end }}
          {{- if .Values.app.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.app.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.app.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.app.readinessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - sh
                - '-c'
                - >
                  response=$(wget --timeout=1 -qO- --header="Accept:
                  application/json" "http://localhost:26657/status"); if [ "$?" -eq
                  0 ] && echo "$response" | grep -q '"catching_up":false'; then
                      echo "Not Catching up";
                      exit 0;
                  else
                      echo "Catching up";
                      exit 1;
                  fi
          {{- end }}
          {{- if .Values.app.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.app.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.app.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.app.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: rpc
          {{- end }}
          {{- end }}
          {{- if .Values.app.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.app.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.app.settings.home }}/data
              {{- if .Values.app.persistence.subPath }}
              subPath: {{ .Values.app.persistence.subPath }}
              {{- end }}
            - name: config-dir
              mountPath: {{ .Values.app.settings.home }}/config
            - name: keys-dir
              mountPath: {{ .Values.app.settings.home }}/keys
            - name: keyring-dir
              mountPath: {{ .Values.app.settings.home }}/keyring-test
            - name: apptoml
              mountPath: {{ .Values.app.settings.home }}/config/app.toml
              subPath: app.toml
            - name: configtoml
              mountPath: {{ .Values.app.settings.home }}/config/config.toml
              subPath: config.toml
            - name: clienttoml
              mountPath: {{ .Values.app.settings.home }}/config/client.toml
              subPath: client.toml
            - name: genesis
              mountPath: {{ .Values.app.settings.home }}/config/genesis.json
              subPath: genesis.json
          {{- if .Values.app.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.app.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.app.otelAgent.enabled }}
        - name: otel-agent
          image: {{ template "app.otelAgent.image" . }}
          imagePullPolicy: {{ .Values.app.otelAgent.image.pullPolicy }}
          ports:
            - containerPort: 4317
              name: otlp-grpc
            - containerPort: 4318
              name: otlp-http
            - containerPort: 8888
              name: prom-collector
            - containerPort: 8889
              name: prom-exporter
          command:
            - "/otelcol-contrib"
            - "--config=/etc/otelcol-contrib/config.yaml"
          env:
            - name: JOB_NAME
              value: {{ template "common.names.fullname" . }}-{{ .Release.Namespace }}
            - name: GRAFANA_OTEL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.otelAgent.grafanaOtelSecret.name }}
                  key: username
            - name: GRAFANA_OTEL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.otelAgent.grafanaOtelSecret.name }}
                  key: token
          {{- if .Values.app.otelAgent.resources }}
          resources: {{- toYaml .Values.app.otelAgent.resources | nindent 12 }}
          {{- else if ne .Values.app.otelAgent.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.app.otelAgent.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: otel-agent-config
              mountPath: /etc/otelcol-contrib/config.yaml
              subPath: config.yaml
        {{- end }}
        {{- if .Values.app.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.app.sidecars "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.app.valMaker.enabled }}
        - name: val-maker
          image: {{ .Values.app.valMaker.image.repository }}:{{ .Values.app.valMaker.image.tag }}
          imagePullPolicy: {{ .Values.app.valMaker.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args: ["/scripts/val-maker.sh"]
          env:
            - name: CELESTIA_HOME
              value: {{ .Values.app.valMaker.celestiaHome }}
            - name: CHAIN_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: FUND_TIA_AMOUNT
              value: {{ .Values.app.valMaker.fundAmount | quote }}
            - name: STAKING_TIA_AMOUNT
              value: {{ .Values.app.valMaker.stakingAmount | quote }}
            - name: CONSENSUS_VALIDATOR_POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSENSUS_VALIDATOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
            - name: CONENSUS_VALIDATOR_POD_NOMINATEES
              value: {{ .Values.app.valMaker.nominatees | quote }}
          volumeMounts:
            - name: val-maker-scripts
              mountPath: /scripts
            - name: kube-api-access
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
          securityContext:
            runAsUser: 10001
            runAsGroup: 10001
        {{- end }}
      volumes:
        {{- if not .Values.app.settings.generateNewKeys }}
        - name: node-key
          secret:
            secretName: {{ .Values.app.settings.secret.name }}
            items:
              - key: node_key_json
                path: node_key.json
            defaultMode: 384
        - name: validator-key
          secret:
            secretName: {{ .Values.app.settings.secret.name }}
            items:
              - key: priv_validator_key_json
                path: priv_validator_key.json
            defaultMode: 384
        {{- end }}
        - name: genesis
          emptyDir: {}
        - name: config-dir
          emptyDir: {}
        - name: keys-dir
          emptyDir: {}
        - name: keyring-dir
          emptyDir: {}
        - name: apptoml
          configMap:
            name: {{ template "common.names.fullname" . }}-config
        - name: clienttoml
          configMap:
            name: {{ template "common.names.fullname" . }}-config
        - name: configtoml
          configMap:
            name: {{ template "common.names.fullname" . }}-config
        {{- if .Values.app.otelAgent.enabled }}
        - name: otel-agent-config
          configMap:
            name: {{ template "common.names.fullname" . }}-otel-agent
            items:
              - key: config.yaml
                path: config.yaml
        {{- end }}
        {{- if .Values.app.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.app.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.app.settings.secret.enabled }}
        - name: keys
          secret:
            secretName: {{ .Values.app.settings.secret.name }}
            items:
            {{- range .Values.app.settings.secret.items }}
              - key: {{ .key }}
                path: {{ .path }}
            {{- end }}
            defaultMode: 0600
        {{- end }}
        {{- if .Values.app.valMaker.enabled }}
        - name: val-maker-scripts
          configMap:
            name: {{ template "common.names.fullname" . }}-val-maker
            defaultMode: 0550
        - name: kube-api-access
          projected:
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        {{- end }}
        {{- if .Values.app.configFiles.config.enabled }}
        - name: config-toml
          configMap:
            name: {{ template "common.names.fullname" . }}-config
        {{- end }}
        {{- if .Values.app.configFiles.app.enabled }}
        - name: app-toml
          configMap:
            name: {{ template "common.names.fullname" . }}-config
        {{- end }}
        {{- if .Values.app.configFiles.client.enabled }}
        - name: client-toml
          configMap:
            name: {{ template "common.names.fullname" . }}-config
        {{- end }}
        {{- if and .Values.app.setup (eq .Values.app.setup.enabled true) }}
        - name: setup-scripts
          configMap:
            name: {{ template "common.names.fullname" . }}-setup
            defaultMode: 0755
        {{- end }}
  {{- if .Values.app.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- if or .Values.app.persistence.annotations .Values.commonAnnotations }}
        {{- $claimAnnotations := include "common.tplvalues.merge" (dict "values" (list .Values.app.persistence.annotations .Values.commonAnnotations) "context" .) }}
        annotations: {{- include "common.tplvalues.render" ( dict "value" $claimAnnotations "context" $ ) | nindent 10 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        labels: {{- include "common.labels.matchLabels" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.app.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.app.persistence.size | quote }}
        {{- if .Values.app.persistence.storageClass }}
        storageClassName: {{ .Values.app.persistence.storageClass }}
        {{- end }}
        {{- if .Values.app.persistence.dataSource }}
        dataSource:
          name: {{ .Values.app.persistence.dataSource.name }}
          kind: {{ .Values.app.persistence.dataSource.kind }}
          apiGroup: {{ .Values.app.persistence.dataSource.apiGroup }}
        {{- end }}
  {{- end }}
