{{- if eq .Values.node.settings.nodeType "bridge" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "common.names.fullname" . }}-configtoml
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: node
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  config.toml: |
    [Node]
      StartupTimeout = "{{ .Values.bridge.config.configtoml.Node.StartupTimeout }}"
      ShutdownTimeout = "{{ .Values.bridge.config.configtoml.Node.ShutdownTimeout }}"
    [Core]
      IP = "{{ .Values.bridge.config.configtoml.Core.IP }}"
      RPCPort = "{{ .Values.bridge.config.configtoml.Core.RPCPort }}"
      GRPCPort = "{{ .Values.bridge.config.configtoml.Core.GRPCPort }}"
    [State]
      DefaultKeyName = "{{ .Values.bridge.config.configtoml.State.DefaultKeyName }}"
      DefaultBackendName = "{{ .Values.bridge.config.configtoml.State.DefaultBackendName }}"
    [P2P]
      ListenAddresses = [{{ range $index, $element := .Values.bridge.config.configtoml.P2P.ListenAddresses }}{{ if $index }}, {{ end }}"{{ $element }}"{{ end }}]
      AnnounceAddresses = {{ .Values.bridge.config.configtoml.P2P.AnnounceAddresses }}
      NoAnnounceAddresses = [{{ range $index, $element := .Values.bridge.config.configtoml.P2P.NoAnnounceAddresses }}{{ if $index }}, {{ end }}"{{ $element }}"{{ end }}]
      MutualPeers = {{ .Values.bridge.config.configtoml.P2P.MutualPeers }}
      PeerExchange = {{ .Values.bridge.config.configtoml.P2P.PeerExchange }}
      RoutingTableRefreshPeriod = "{{ .Values.bridge.config.configtoml.P2P.RoutingTableRefreshPeriod }}"
      [P2P.ConnManager]
        Low = {{ printf "%.0f" .Values.bridge.config.configtoml.P2P.ConnManager.Low }}
        High = {{ printf "%.0f" .Values.bridge.config.configtoml.P2P.ConnManager.High }}
        GracePeriod = "{{ .Values.bridge.config.configtoml.P2P.ConnManager.GracePeriod }}"
    [RPC]
      Address = "{{ .Values.bridge.config.configtoml.RPC.Address }}"
      Port = "{{ .Values.bridge.config.configtoml.RPC.Port }}"
      SkipAuth = {{ .Values.bridge.config.configtoml.RPC.SkipAuth }}
    [Gateway]
      Address = "{{ .Values.bridge.config.configtoml.Gateway.Address }}"
      Port = "{{ .Values.bridge.config.configtoml.Gateway.Port }}"
      Enabled = {{ .Values.bridge.config.configtoml.Gateway.Enabled }}
    [Share]
      UseShareExchange = {{ .Values.bridge.config.configtoml.Share.UseShareExchange }}
      [Share.EDSStoreParams]
        GCInterval = "{{ .Values.bridge.config.configtoml.Share.EDSStoreParams.GCInterval }}"
        RecentBlocksCacheSize = {{ printf "%.0f" .Values.bridge.config.configtoml.Share.EDSStoreParams.RecentBlocksCacheSize }}
        BlockstoreCacheSize = {{ printf "%.0f" .Values.bridge.config.configtoml.Share.EDSStoreParams.BlockstoreCacheSize }}
      [Share.ShrExEDSParams]
        ServerReadTimeout = "{{ .Values.bridge.config.configtoml.Share.ShrExEDSParams.ServerReadTimeout }}"
        ServerWriteTimeout = "{{ .Values.bridge.config.configtoml.Share.ShrExEDSParams.ServerWriteTimeout }}"
        HandleRequestTimeout = "{{ .Values.bridge.config.configtoml.Share.ShrExEDSParams.HandleRequestTimeout }}"
        ConcurrencyLimit = {{ printf "%.0f" .Values.bridge.config.configtoml.Share.ShrExEDSParams.ConcurrencyLimit }}
        BufferSize = {{ printf "%.0f" .Values.bridge.config.configtoml.Share.ShrExEDSParams.BufferSize }}
      [Share.ShrExNDParams]
        ServerReadTimeout = "{{ .Values.bridge.config.configtoml.Share.ShrExNDParams.ServerReadTimeout }}"
        ServerWriteTimeout = "{{ .Values.bridge.config.configtoml.Share.ShrExNDParams.ServerWriteTimeout }}"
        HandleRequestTimeout = "{{ .Values.bridge.config.configtoml.Share.ShrExNDParams.HandleRequestTimeout }}"
        ConcurrencyLimit = {{ printf "%.0f" .Values.bridge.config.configtoml.Share.ShrExNDParams.ConcurrencyLimit }}
      [Share.PeerManagerParams]
        PoolValidationTimeout = "{{ .Values.bridge.config.configtoml.Share.PeerManagerParams.PoolValidationTimeout }}"
        PeerCooldown = "{{ .Values.bridge.config.configtoml.Share.PeerManagerParams.PeerCooldown }}"
        GcInterval = "{{ .Values.bridge.config.configtoml.Share.PeerManagerParams.GcInterval }}"
        EnableBlackListing = {{ .Values.bridge.config.configtoml.Share.PeerManagerParams.EnableBlackListing }}
      [Share.Discovery]
        PeersLimit = {{ printf "%.0f" .Values.bridge.config.configtoml.Share.Discovery.PeersLimit }}
        AdvertiseInterval = "{{ .Values.bridge.config.configtoml.Share.Discovery.AdvertiseInterval }}"
    [Header]
      TrustedHash = "{{ .Values.bridge.config.configtoml.Header.TrustedHash }}"
      TrustedPeers = {{ .Values.bridge.config.configtoml.Header.TrustedPeers }}
      [Header.Store]
        StoreCacheSize = {{ printf "%.0f" .Values.bridge.config.configtoml.Header.Store.StoreCacheSize }}
        IndexCacheSize = {{ printf "%.0f" .Values.bridge.config.configtoml.Header.Store.IndexCacheSize }}
        WriteBatchSize = {{ printf "%.0f" .Values.bridge.config.configtoml.Header.Store.WriteBatchSize }}
      [Header.Syncer]
        TrustingPeriod = "{{ .Values.bridge.config.configtoml.Header.Syncer.TrustingPeriod }}"
      [Header.Server]
        WriteDeadline = "{{ .Values.bridge.config.configtoml.Header.Server.WriteDeadline }}"
        ReadDeadline = "{{ .Values.bridge.config.configtoml.Header.Server.ReadDeadline }}"
        RangeRequestTimeout = "{{ .Values.bridge.config.configtoml.Header.Server.RangeRequestTimeout }}"
      [Header.Client]
        MaxHeadersPerRangeRequest = {{ printf "%.0f" .Values.bridge.config.configtoml.Header.Client.MaxHeadersPerRangeRequest }}
        RangeRequestTimeout = "{{ .Values.bridge.config.configtoml.Header.Client.RangeRequestTimeout }}"
    [Pruner]
      EnableService = {{ .Values.bridge.config.configtoml.Pruner.EnableService }}
{{- end }}
