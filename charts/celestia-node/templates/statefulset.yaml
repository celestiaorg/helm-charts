apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: node
  {{- if or .Values.node.statefulsetAnnotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.node.statefulsetAnnotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.node.replicaCount }}
  podManagementPolicy: {{ .Values.node.podManagementPolicy | quote }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.node.podLabels .Values.commonLabels) "context" .) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: node
  serviceName: {{ template "common.names.fullname" . }}
  {{- if .Values.node.updateStrategy }}
  updateStrategy: {{- toYaml .Values.node.updateStrategy | nindent 4 }}
  {{- end }}
  {{- if .Values.node.persistentVolumeClaimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    {{- if .Values.node.persistentVolumeClaimRetentionPolicy.whenDeleted }}
    whenDeleted: {{ .Values.node.persistentVolumeClaimRetentionPolicy.whenDeleted | quote }}
    {{- end }}
    {{- if .Values.node.persistentVolumeClaimRetentionPolicy.whenScaled }}
    whenScaled: {{ .Values.node.persistentVolumeClaimRetentionPolicy.whenScaled | quote }}
    {{- end }}
  {{- end }}
  template:
    metadata:
      {{- if .Values.node.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.node.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: node
    spec:
      {{- include "node.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "node.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.node.automountServiceAccountToken }}
      {{- if .Values.node.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.node.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.node.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.node.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.node.podAffinityPreset "component" "app" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.node.podAntiAffinityPreset "component" "app" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.node.nodeAffinityPreset.type "key" .Values.node.nodeAffinityPreset.key "values" .Values.node.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.node.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.node.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.node.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.node.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.node.priorityClassName }}
      priorityClassName: {{ .Values.node.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.node.schedulerName }}
      schedulerName: {{ .Values.node.schedulerName | quote }}
      {{- end }}
      {{- if .Values.node.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.node.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.node.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.node.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.node.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.node.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "node.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - "sh"
            - "-c"
            - "chown -R {{ .Values.node.containerSecurityContext.runAsUser }}:{{ .Values.node.containerSecurityContext.runAsGroup }} {{ .Values.node.settings.home }}"
          {{- if .Values.volumePermissions.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.volumePermissions.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- else if ne .Values.volumePermissions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.volumePermissions.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if and .Values.persistence.enabled (not .Values.persistence.enabledMultiVolume) }}
            - name: data
              mountPath: {{ .Values.node.settings.home }}/data
              subPath: data
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/blocks
              subPath: blocks
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/index
              subPath: index
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/inverted_index
              subPath: inverted_index
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/transients
              subPath: transients
              readOnly: false
            {{- else if and .Values.persistence.enabled .Values.persistence.enabledMultiVolume }}
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/data
              subPath: data
              readOnly: false
            - name: data-blocks
              mountPath: {{ .Values.node.settings.home }}/blocks
              subPath: blocks
              readOnly: false
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/index
              subPath: index
              readOnly: false
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/inverted_index
              subPath: inverted_index
              readOnly: false
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/transients
              subPath: transients
              readOnly: false
            {{- end }}
          {{- end }}
        - name: home-permission
          image: busybox
          command:
            - "sh"
            - "-c"
            - |
              set -ex
              chown -R {{ .Values.node.containerSecurityContext.runAsUser }}:{{ .Values.node.containerSecurityContext.runAsGroup }} /home
              ls -ltra /home
          volumeMounts:
            - name: home-dir # This is needed so that the process has permissions to create files in the home directory
              mountPath: /home
              readOnly: false
        - name: keys
          image: busybox
          command:
            - "sh"
            - "-c"
            - |
              set -ex
              mkdir -p /keys-volume/keyring-test
              cp /keys/NJ3XILLTMVRXEZLUFZVHO5A /keys-volume/
              cp /keys/OAZHALLLMV4Q /keys-volume/
              cp /keys/my_celes_key.info /keys-volume/keyring-test/
              printf "%s" "$(cat /keys/address)" > /keys-volume/keyring-test/$(cat /keys/uid).address
              chown -R {{ .Values.node.containerSecurityContext.runAsUser }}:{{ .Values.node.containerSecurityContext.runAsGroup }} /keys-volume/
              find /keys-volume/ -type f -exec chmod 0600 {} \;
          volumeMounts:
            - name: keys
              mountPath: /keys
              readOnly: true
            - name: keys-volume
              mountPath: /keys-volume
        {{- if .Values.node.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.node.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: node
          {{- if or (eq .Values.node.settings.network "mocha") (eq .Values.node.settings.network "arabica") -}}
          image: {{ template "node.image" . }}-{{ .Values.node.settings.network }}
          {{- else -}}
          image: {{ template "node.image" . }}
          {{- end }}
          imagePullPolicy: {{ .Values.node.image.pullPolicy }}
          {{- if .Values.node.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.node.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.node.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.node.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else }}
          args: {{ include "node.containerArgs" . | nindent 12 }}
          {{- end }}
          env:
            - name: CELESTIA_HOME
              value: {{ .Values.node.settings.home }}
            {{- if .Values.node.settings.ws.tls.enabled }}
            - name: CELESTIA_TLS_PATH
              value: {{ .Values.node.settings.home }}/tls
            {{- end }}
            {{- if .Values.node.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.node.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.node.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.node.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.node.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.node.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.node.resources }}
          resources: {{- toYaml .Values.node.resources | nindent 12 }}
          {{- else if ne .Values.node.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.node.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: p2p-tcp
              containerPort: {{ .Values.node.containerPorts.p2p }}
              hostPort: {{ .Values.node.containerPorts.p2p }}
              protocol: TCP
            - name: p2p-udp
              containerPort: {{ .Values.node.containerPorts.p2p }}
              hostPort: {{ .Values.node.containerPorts.p2p }}
              protocol: UDP
            - name: ws
              containerPort: {{ .Values.node.containerPorts.ws }}
              hostPort: {{ .Values.node.containerPorts.ws }}
              protocol: TCP
            - name: rest
              containerPort: {{ .Values.node.containerPorts.rest }}
              hostPort: {{ .Values.node.containerPorts.rest }}
            - name: rpc
              containerPort: {{ .Values.node.containerPorts.rpc }}
              hostPort: {{ .Values.node.containerPorts.rpc }}
            - name: profiling
              containerPort: {{ .Values.node.containerPorts.profiling }}
            - name: prometheus
              containerPort: {{ .Values.node.containerPorts.prometheus }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.node.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.node.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.node.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.node.livenessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: rpc
          {{- end }}
          {{- if .Values.node.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.node.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.node.readinessProbe.enabled }}
          {{- if or (eq .Values.node.settings.nodeType "bridge") (eq .Values.node.settings.nodeType "full") (eq .Values.node.settings.nodeType "light") }}
          readinessProbe:
            exec:
              command:
                - sh
                - '-c'
                - >
                  AUTH_TOKEN=$(celestia bridge auth read --node.store=/home/celestia 2>/dev/null);
                  {{- if eq .Values.node.settings.nodeType "bridge" }}
                  curl --max-time 0.5 -s -X POST -H "Content-type: application/json" -H "Accept: application/json" -H "Authorization: Bearer $AUTH_TOKEN" -d '{"id":1,"jsonrpc":"2.0","method":"header.SyncWait","params":[]}' "http://localhost:26658";
                  {{- else if or (eq .Values.node.settings.nodeType "full") (eq .Values.node.settings.nodeType "light") }}
                  curl --max-time 0.5 -s -X POST -H "Content-type: application/json" -H "Accept: application/json" -H "Authorization: Bearer $AUTH_TOKEN" -d '{"id":1,"jsonrpc":"2.0","method":"das.WaitCatchUp","params":[]}' "http://localhost:26658";
                  {{- end }}
                  if [ "$?" -eq 0 ]; then exit 0; else echo "Catching up"; exit 1; fi
          {{- end }}
          {{- end }}
          {{- if .Values.node.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.node.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.node.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.node.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: rpc
          {{- end }}
          {{- end }}
          {{- if .Values.node.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.node.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if and .Values.persistence.enabled (not .Values.persistence.enabledMultiVolume) }}
            - name: data
              mountPath: {{ .Values.node.settings.home }}/data
              subPath: data
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/blocks
              subPath: blocks
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/index
              subPath: index
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/inverted_index
              subPath: inverted_index
              readOnly: false
            - name: data
              mountPath: {{ .Values.node.settings.home }}/transients
              subPath: transients
              readOnly: false
            {{- else if and .Values.persistence.enabled .Values.persistence.enabledMultiVolume }}
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/data
              subPath: data
              readOnly: false
            - name: data-blocks
              mountPath: {{ .Values.node.settings.home }}/blocks
              subPath: blocks
              readOnly: false
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/index
              subPath: index
              readOnly: false
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/inverted_index
              subPath: inverted_index
              readOnly: false
            - name: data-others
              mountPath: {{ .Values.node.settings.home }}/transients
              subPath: transients
              readOnly: false
            {{- end }}
            - name: keys-volume
              mountPath: {{ .Values.node.settings.home }}/keys
              readOnly: false
            - name: configtoml
              mountPath: {{ .Values.node.settings.home }}/config.toml
              subPath: config.toml
            - name: home-dir # This is needed so that the process has permissions to create files in the home directory
              mountPath: {{ .Values.node.settings.home }}
              readOnly: false
            {{- if .Values.node.settings.ws.tls.enabled }}
            - name: tls-certs
              mountPath: {{ .Values.node.settings.home }}/tls/cert.pem
              subPath: tls.crt
              readOnly: true
            - name: tls-certs
              mountPath: {{ .Values.node.settings.home }}/tls/key.pem
              subPath: tls.key
              readOnly: true
            {{- end }}
          {{- if .Values.node.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.node.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        - name: otel-agent
          image: {{ template "node.otelAgent.image" . }}
          imagePullPolicy: {{ .Values.node.otelAgent.image.pullPolicy }}
          ports:
            - containerPort: 4317
              name: otlp-grpc
            - containerPort: 4318
              name: otlp-http
            - containerPort: 8888
              name: prom-collector
            - containerPort: 8889
              name: prom-exporter
          command:
            - "/otelcol-contrib"
            - "--config=/etc/otelcol-contrib/config.yaml"
          env:
            - name: JOB_NAME
              value: {{ template "common.names.fullname" . }}-{{ .Release.Namespace }}
            - name: GRAFANA_OTEL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.node.otelAgent.grafanaOtelSecret.name }}
                  key: username
            - name: GRAFANA_OTEL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.node.otelAgent.grafanaOtelSecret.name }}
                  key: token
          {{- if .Values.node.otelAgent.resources }}
          resources: {{- toYaml .Values.node.otelAgent.resources | nindent 12 }}
          {{- else if ne .Values.node.otelAgent.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.node.otelAgent.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: otel-agent-config
              mountPath: /etc/otelcol-contrib/config.yaml
              subPath: config.yaml
        {{- if .Values.node.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.node.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: keys
          secret:
            secretName: {{ .Values.node.settings.secret.name }}
            items:
              - key: NJ3XILLTMVRXEZLUFZVHO5A
                path: NJ3XILLTMVRXEZLUFZVHO5A
              - key: OAZHALLLMV4Q
                path: OAZHALLLMV4Q
              - key: my_celes_key_info
                path: my_celes_key.info
              - key: uid
                path: uid
              - key: address
                path: address
        - name: keys-volume
          emptyDir: {}
        - name: home-dir
          emptyDir: {}
        - name: configtoml
          configMap:
            name: {{ template "common.names.fullname" . }}-configtoml
        {{- if .Values.node.settings.ws.tls.enabled }}
        - name: tls-certs
          secret:
            secretName: {{ .Values.node.settings.ws.tls.secret.name }}
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
        {{- end }}
        - name: otel-agent-config
          configMap:
            name: {{ template "common.names.fullname" . }}-otel-agent
            items:
              - key: config.yaml
                path: config.yaml
        {{- if and .Values.persistence.enabled (not .Values.persistence.enabledMultiVolume) }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ template "common.names.fullname" . }}-data
        {{- else if and .Values.persistence.enabled .Values.persistence.enabledMultiVolume }}
        - name: data-blocks
          persistentVolumeClaim:
            claimName: {{ template "common.names.fullname" . }}-data-blocks
        - name: data-others
          persistentVolumeClaim:
            claimName: {{ template "common.names.fullname" . }}-data-others
        {{- else }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if .Values.node.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.node.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
